enum UserRole {
  FARMER
  BUYER
  DELIVERY_AGENT
}

enum OrderStatus {
    PENDING
    ACCEPTED
    REJECTED
}

enum DeliveryStatus {
    PENDING
    PREPARED
    SHIPPED
    OUT_FOR_DELIVERY
    DELIVERED
    CANCELLED
}

type Order @model
  @auth(rules: [
    { allow: owner, ownerField: "buyerID", identityClaim: "sub", operations: [create, read, update] },
    { allow: private, provider: userPools, operations: [read, update]}
    ]) {
    id: ID!
    buyerID: ID!
        @index(name: "byBuyerOrders", sortKeyFields: ["createdAt"], queryField: "ordersByBuyer")
    buyer: User @belongsTo(fields: ["buyerID"])
    farmerID: ID!
        @index(name: "byFarmerOrders", sortKeyFields: ["createdAt"], queryField: "ordersByFarmer")
    farmer: User @belongsTo(fields: ["farmerID"])
    cropID: ID!
        @index(name: "byCropOrders", queryField: "ordersByCrop")
    crop: Crop @belongsTo(fields: ["cropID"])
    quantity: Int!
    bargainedPrice: Int!
    realPrice: Int!
    deliveryAddress: String!
    deliveryPhone: AWSPhone!
    deliveryPincode: String!
    orderStatus: OrderStatus!
    createdAt: AWSDateTime!
    updatedAt: AWSDateTime!
    # 24 hours more than createdAt, if not accepted it expires.
    expiresAt: AWSDateTime!
  }

type User @model
  @auth(rules: [
    { allow: private, provider: userPools, operations: [create] },
    { allow: owner, ownerField: "ownerID", identityClaim: "sub", operations: [create, read, update, delete] },
    { allow: groups, groups: ["FarmerGroup","BuyerGroup","DeliveryGroup"], operations: [read] }
  ]) {
  id: ID!
  name: String!
  email: AWSEmail!
  phone: AWSPhone
  ownerID: ID!
  profilePicture: String

  # Index to query users by role
  role: UserRole!
    @index(name: "byRole", queryField: "usersByRole")

  # A farmer’s crops
  crops: [Crop]
    @hasMany(indexName: "byFarmer", fields: ["id"])

  # A buyer’s purchases
  purchases: [Purchase]
    @hasMany(indexName: "byBuyer", fields: ["id"])

  # A buyer's cart items
  cartItems: [CartItem] @hasMany(indexName: "byUser", fields: ["id"])

  # A buyer's orders
  ordersPlaced: [Order] @hasMany(indexName: "byBuyerOrders", fields: ["id"])

  # A farmer's order
  ordersTaken: [Order] @hasMany(indexName: "byFarmerOrders", fields: ["id"])

  # An agent's deliveries
  deliveriesAssigned: [Delivery]
    @hasMany(indexName: "deliveriesByAgent", fields: ["id"])

  sentMessages: [Message] @hasMany(indexName: "messagesBySender", fields: ["id"])
  receivedMessages: [Message] @hasMany(indexName: "messagesByReceiver", fields: ["id"])
}

type Crop @model @searchable
  @auth(rules: [
    { allow: owner, ownerField: "farmerID", identityClaim: "sub", operations: [create, read, update, delete] },
    { allow: groups, groups: ["BuyerGroup","DeliveryGroup", "FarmerGroup"], operations: [read] }
  ]) {
  id: ID!
  title: String!
  description: String
  price: Float!
  quantityAvailable: Int!
  imageUrl: String
  location: String

  # Back-refs for items, purchases and orders
  cartItems: [CartItem]
    @hasMany(indexName: "byCrop", fields: ["id"])
  purchases: [Purchase]
    @hasMany(indexName: "byCropPurchase", fields: ["id"])
  orders: [Order]
    @hasMany(indexName: "byCropOrders", fields: ["id"])

  # Who listed this crop
  farmerID: ID!
    @index(name: "byFarmer", sortKeyFields: ["createdAt"], queryField: "cropsByFarmer")
  farmer: User
    @belongsTo(fields: ["farmerID"])

  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type CartItem @model
  @auth(rules: [
    { allow: owner, ownerField: "userID", identityClaim: "sub", operations: [read, create, update, delete] }
  ]) {
  id: ID!

  userID: ID! @index(name: "byUser", sortKeyFields: ["addedAt"], queryField: "cartItemsByUser")
  user: User @belongsTo(fields: ["userID"])

  cropID: ID! @index(name: "byCrop", queryField: "cartItemsByCrop")
  crop: Crop @belongsTo(fields: ["cropID"])

  quantity: Int!
  priceAtAdd: Float!
  addedAt: AWSDateTime!

  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Purchase @model
  @auth(rules: [
    { allow: owner, ownerField: "buyerID", identityClaim: "sub", operations: [read, create] },
    { allow: groups, groups: ["FarmerGroup"], operations: [read] }
  ]) {
  id: ID!
  buyerID: ID!
    @index(name: "byBuyer", sortKeyFields: ["createdAt"], queryField: "purchasesByBuyer")
  buyer: User
    @belongsTo(fields: ["buyerID"])
  farmerID: ID!
    @index(name: "byFarmer", sortKeyFields: ["createdAt"], queryField: "purchasesByFarmer")
  farmer: User
    @belongsTo(fields: ["farmerID"])
  cropID: ID!
    @index(name: "byCropPurchase", queryField: "purchasesByCrop")
  crop: Crop
    @belongsTo(fields: ["cropID"])
  delivery: Delivery
    @hasOne(fields: ["id"])
  quantity: Int!
  totalAmount: Float!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Delivery @model
  @auth(rules: [
    # Farmer is the owner (can create, read, update, delete)
    { allow: owner, ownerField: "farmerID", identityClaim: "sub", operations: [create, read, update] },
    # Buyer groups can read and edit (cancel delivery)
    { allow: groups, groups:["BuyerGroup"], operations: [read, update] }
    # Delivery, Farmer groups can read
    { allow: groups, groups: ["FarmerGroup", "DeliveryGroup"], operations: [read] }
  ]) {
  id: ID!
  purchaseID: ID!
    @index(name: "deliveriesByPurchase", queryField: "deliveriesByPurchase")
  purchase: Purchase @belongsTo(fields: ["purchaseID"])

  # Farmer is now the owner
  farmerID: ID!
    @index(name: "deliveriesByFarmer", queryField: "deliveriesByFarmer")
  farmer: User @belongsTo(fields: ["farmerID"])

  # Optional agent
  agentID: ID
    @index(name: "deliveriesByAgent", sortKeyFields: ["createdAt"], queryField: "deliveriesByAgent")
  agent: User @belongsTo(fields: ["agentID"])

  # Optional fallback info for personal delivery agents
  personalAgentName: String
  personalAgentPhone: AWSPhone
  personalAgentEmail: AWSEmail

  deliveryAddress: String!
  deliveryStatus: DeliveryStatus!

  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Message @model
  @auth(rules: [
    { allow: owner, ownerField: "senderID", identityClaim: "sub", operations: [create, read, update, delete] },
    { allow: private, provider: userPools, operations: [read] }
  ]) {
  id: ID!

  # Who sent this message
  senderID: ID!
    @index(name: "messagesBySender", sortKeyFields: ["createdAt"], queryField: "messagesBySender")
  sender: User @belongsTo(fields: ["senderID"])

  # Who received it
  receiverID: ID!
    @index(name: "messagesByReceiver", sortKeyFields: ["createdAt"], queryField: "messagesByReceiver")
  receiver: User @belongsTo(fields: ["receiverID"])

  content: String!
  isRead: Boolean! @default(value: "false")

  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}
